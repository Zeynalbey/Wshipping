@using Wship.Areas.Client.ViewModels.Register
@model RegisterViewModel
<!DOCTYPE html>
<html lang="en">


<!-- Mirrored from 166.az/az/register by HTTrack Website Copier/3.x [XR&CO'2014], Fri, 25 Nov 2022 19:40:35 GMT -->
<!-- Added by HTTrack -->
<meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
    <meta charset="utf-8">

    <title>166</title>

    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="icon" type="image/png" href="~/img/Logoab11.png?v=1574778128">
    <link rel="manifest" href="../404.html">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="~/img/Logoab11.png?v=1574778128">

    <meta name="theme-color" content="#000">

    <link href="../../use.fontawesome.com/releases/v5.0.13/css/all.css" rel="stylesheet" />

    <link href="../../maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">

    <link rel="stylesheet" href="~/css/app.mind5a8.css?v=1666717503">
    <link rel="stylesheet" href="~/css/tempus-dominusc433.css?v=1659073936" />
</head>

<body id="body">
    <main class="registration">
        <div class="registration-left d-none d-lg-flex">
            <header class="container header-container">
                <a asp-route="admin-home-index">
                    <img src="~/img/Logoab11.png?v=1574778128" alt="166">
                </a>
            </header>
            <section class="container registration-post">
                <div class="registration-post--item">
                    <h1>Ölkədaxili daşınmalar indi yalnız 6 AZN-dən başlayan qiymətlə</h1>
                    <a href="../index.html">Ətraflı bax</a>
                </div>
            </section>
        </div>
        <div class="registration-right" style="z-index: 1100;min-height: 100vh;">
            <header>
                <div class="registration-right__header">
                    <p>Artıq hesabınız var?</p>
                    <a asp-route="client-auth-login">DAXİL OL</a>
                </div>
            </header>
            <div class="register-body">

                <h2 class="title-registration">Qeydiyyat</h2>
                <section class="registration-tabs">
                    <a href="#" class="active" id="customer">Müştəri</a>
                </section>
                <section class="registration-right__content customer">
                    <form method="post" asp-route="client-auth-register">

                        <div class="form-row">
                            <label for="">Ad *</label>
                            <input asp-for="FirstName" type="text" name="firstName">
                            <span asp-validation-for="FirstName" class="text-danger small"></span>
                        </div>

                        <div class="form-row">
                            <label for="">Soyad *</label>
                            <input asp-for="LastName" type="text" name="lastName">
                            <span asp-validation-for="LastName" class="text-danger small"></span>
                        </div>

                        <div class="form-row">
                            <label for="">Elektron poçt *</label>
                            <input asp-for="Email" type="email" name="email">
                            <span asp-validation-for="Email" class="text-danger small"></span>
                        </div>

                        <div class="form-row">
                            <label for="">Mobil nömrə *</label>
                            <input asp-for="PhoneNumber" type="text">
                            <span asp-validation-for="PhoneNumber" class="text-danger small" ></span>
                        </div>

                        <div class="form-row">
                            <label for="">Şifrə *</label>
                            <input asp-for="Password" type="password" name="password">
                            <span asp-validation-for="Password" class="text-danger small"></span>
                            <i class="fas fa-eye"></i>

                        </div>
                        <div class="form-row">
                            <label for="">Təkrar şifrə *</label>
                            <input asp-for="ConfirmPassword" type="password" name="confirmPassword">
                            <span asp-validation-for="ConfirmPassword" class="text-danger small"></span>
                            <i class="fas fa-eye"></i>

                        </div>
                        <button type="submit">QEYDİYYATDAN KEÇ</button>
                    </form>
                </section>

            </div>


        </div>
    </main>





    <script src="../../code.jquery.com/jquery-3.3.1.min.js" type="text/javascript"></script>
    <script src="../../maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="../../stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

    <script src="../site/js/common22d6.js?v=1611567991"></script>


    <!--Js Cookie -->
    <script src='../admin/js/js.cookie.minea59.js?v=1544878560'></script>

    <!--SweetAlert2 -->
    <script src='../admin/js/sweetalert2.all.min24b3.js?v=1540642556'></script>

    <!--Underscore -->
    <script src='../admin/js/underscore-min5401.js?v=1547317722'></script>


    <script type="text/javascript">
        _.templateSettings.variable = "rc";

        let locale = 'az',
            csrf = '4aKlqwlXwd7b9RU5R23Kv6G6YEKsZgsl2q2JiJUt',
            deleted_files = [];


        function loading(state = 0) {
            if (state) {
                $('#loading').show();

                $('body').addClass('loading-progress');
            } else {
                $('#loading').hide();

                $('body').removeClass('loading-progress');
            }
        }


        function error(message = '', title = "Xəta baş verdi") {
            const swalWithBootstrapButtons = swal.mixin({
                confirmButtonClass: 'btn btn-primary',
                buttonsStyling: false,
            });

            swalWithBootstrapButtons({
                title: title,
                text: message,
                type: 'warning'
            });

            loading();
        }


        function init() {

            loading();
        }


        function createModal(title, body, close = true, widthClass = 'my-col-xs-11 my-col-sm-10 my-col-md-9 my-col-lg-8', buttons = '', headerClass = '') {
            var headerClass = typeof headerClass === "undefined" ? "" : headerClass,
                widthClass = typeof widthClass === "undefined" ? "" : widthClass,
                buttons = typeof buttons === "undefined" ? "" : buttons,
                modalNumber = createModalHTML(widthClass, close);

            var m = $("#newModal" + modalNumber);
            m.find(".modal-content").children(":not([do=loading] , .modal-header:eq(0) , .modal-body:eq(0) , .modal-footer:eq(0))").remove();
            if (m.find(".modal-content").children(".modal-body").length == 0) {
                m.find(".modal-content").append('<div class="modal-body"></div>');
            }
            if (m.find(".modal-content").children(".modal-footer").length == 0) {
                //m.find( ".modal-content" ).append( '<div class="modal-footer"></div>' );
            }
            m.find(".modal-header").addClass(headerClass);
            m.find(".modal-title").html(title);
            m.find(".modal-body-content").html(body);
            m.find(".modal-footer").html(buttons);
            m.css('cssText', 'z-index: ' + (12 + modalNumber * 2) + ' !important; top: 50px !important; margin-left: 77px;');
            m.modal("show");
            m.next('.modal-backdrop').css('cssText', 'z-index: ' + (11 + modalNumber * 2) + ' !important');

            if (m.find('[x-modal-title]')) m.find('.modal-title').html(m.find('[x-modal-title]').attr('x-modal-title'));

            if (m.find('[x-modal-class]')) m.find('.modal-dialog').addClass(m.find('[x-modal-class]').attr('x-modal-class'));

            return m;
        }

        function createModalHTML(widthClass, close) {
            var n = 1;
            while ($("#newModal" + n).length) n++;
            var effects = ["flipInX", "flipInY", "pulse", "jello", "fadeIn"],
                effect = effects[Math.floor(Math.random() * 111) % effects.length];
            $("body").append('<div class="modal scroll fade" id="newModal' + n + '" role="dialog" ' + (close ? '' : 'data-backdrop="static"') + '><div class="modal-dialog ' + effect + ' ' + widthClass + ' animated"><div class="modal-content"><div class = "modal-header" style = "width: 100%; position: relative; padding: 8px;"><h4 class = "modal-title" style="font-size: 21px; margin-left: 10px;"></h4><span class="close-modal" data-dismiss="modal" aria-label="Close" style="position:absolute; top: 9px; right: 9px; cursor: pointer;"><i class="la la-close" style="font-size: 30px; font-weight: bold;"></i></span></div><div class="modal-body scroll" style="max-height: ' + (window.innerHeight - 185) + 'px;"><div class="row modal-body-content"></div></div></div></div></div></div>');
            $("#newModal" + n).on("hidden.bs.modal", function () {
                $(this).remove();
            });
            return n;
        }


        function pagination(page, all, per, length, list = 'main') {
            let show = 3, count = Math.ceil(all / per), html = '';

            if (all) {
                html += '<ul class="m-datatable__pager-nav"><h5 style="color: #ffc425;">Total: ' + all + '</h5></ul>';
            }

            if (count > 1) {
                html += '<ul class="m-datatable__pager-nav pull-right" style="margin-top: 5px; margin-left: 30px;">';

                if (page > 1) {
                    html += '<li><a x-paginate="' + (page - 1) + '" class="m-datatable__pager-link"><i class="la la-angle-left"></i></a></li>';
                }

                if (page > (show + 1)) {
                    html += '<li><a x-paginate="1" class="m-datatable__pager-link">1</a></li>';

                    if (page > (show + 2)) {
                        html += '<li><a>. . .</a></li>';
                    }
                }

                for (let i = 1; i <= count; i++) {
                    if ((page > i && (page - i) <= show) || (page < i && (i - page) <= show) || i === page) {
                        html += '<li><a ' + (i !== page ? 'x-paginate="' + i + '"' : '') + ' class="m-datatable__pager-link ' + (i === page ? 'm-datatable__pager-link--active' : '') + '">' + i + '</a></li>';
                    }
                }

                if ((count - page) > show) {
                    if ((count - page) > (show + 1)) {
                        html += '<li><a>. . .</a></li>';
                    }

                    html += '<li><a x-paginate="' + count + '" class="m-datatable__pager-link">' + count + '</a></li>';
                }

                if (page < count) {
                    html += '<li><a x-paginate="' + (page + 1) + '" class="m-datatable__pager-link"><i class="la la-angle-right"></i></a></li>';
                }
            }

            $('[x-pagination="' + list + '"]').html(html);


            if ((page - 1) * per + length < all) $('[x-more]').show();
            else $('[x-more]').hide();
        }


        function checkboxList() {
            $('[x-checkbox-list]').each(function () {
                let t = $(this),
                    name = t.attr('x-checkbox-list'),
                    f = t.closest('form'),
                    parameters = [];

                if (t.find('[x-checkbox-id]').length) {
                    t.find('[x-checkbox-id]').each(function () {
                        let i = $(this), id = i.attr('x-checkbox-id');

                        if (id != undefined && i.prop('checked')) {
                            parameters.push(id);
                        }
                    });
                }

                if (name != undefined) {
                    if (name === 'roles' && t.find('[x-checkbox-id="admin"]').prop('checked')) {
                        f.find('[name="' + name + '"]').val('admin');
                    } else {
                        f.find('[name="' + name + '"]').val(parameters);
                    }
                }
            });
        }


        function media(url) {
            try {
                let http = new XMLHttpRequest();
                http.open('HEAD', url, false);
                http.send();
                return http.status < 300 ? url : 'https://166.az/uploads/default.png?v=1564074968';
            } catch (e) {
                return 'https://166.az/uploads/default.png?v=1564074968';
            }
        }


        function images(data) {
            if (data.images !== undefined && data.images.length) {
                for (let i in data.images) {
                    $('[x-images]').append(_.template($('script[x-image]').html())(data.images[i]));
                }
            }
        }


        $(document).ready(function () {
            $('[x-list-form="main"]').append('<input type="hidden" name="page" value="1">');

            if ($('[x-service]').length) $('[x-list-form]').append('<input type="hidden" name="service" value="All">');

            $('[x-list-form="main"]').append('<input type="hidden" name="per" value="10"><input type="hidden" name="search" value="">');


            $(document).on('submit', '[x-list-form]', function (e) {
                e.preventDefault();

                loading(1);

                let t = $(this), formData = new FormData(this), html = '', body = t.find('[x-list-tbody]'),
                    list = t.attr('x-list-form'),
                    modal = t.attr('x-modal') !== undefined ? t.attr('x-modal') : 'tr';

                if (!body.length) body = $('[x-list-tbody]');

                formData.append('_token', csrf);

                $.ajax({
                    type: 'POST',
                    url: t.attr('action'),
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (res) {
                        if (
                            res &&
                            typeof (res['data']) !== 'undefined' &&
                            typeof (res['all']) !== 'undefined' &&
                            typeof (res['page']) !== 'undefined' &&
                            typeof (res['per']) !== 'undefined'
                        ) {
                            let data = res['data'],
                                all = res['all'],
                                page = res['page'],
                                per = res['per'];

                            if (data.length) {
                                var k = 1;

                                for (let i in data) {
                                    data[i]['no'] = k++;

                                    html += _.template($('script[x-' + modal + ']').html())(data[i]);
                                }
                            } else {
                                html = '<tr><td colspan="55" style="text-align: center;"><h4>No data found!</h4></td></tr>';
                            }

                            pagination(page, all, per, data.length, list);

                            body.html(html);

                            body.closest('.scroll').animate({ scrollTop: 0 }, 'slow');

                            loading();
                        } else {
                            error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                        }
                    }
                });
            });


            $(document).on('click', '[x-paginate]', function () {
                let page = $(this).attr('x-paginate'),
                    list = $(this).closest('[x-pagination]').attr('x-pagination');

                $('[x-list-form="' + list + '"] [name="page"]').val(page);

                $('[x-list-form="' + list + '"]').submit();
            });


            $(document).on('click', '[x-more]', function () {
                let t = $(this),
                    form = t.closest('form'),
                    input = form.find('[name="page"]'),
                    page = input.val();

                input.val(++page);

                form.submit();
            });


            $(document).on('click', '[x-service]', function (e) {
                e.stopPropagation();
                e.preventDefault();

                let t = $(this),
                    form = t.closest('form'),
                    input = form.find('[name="service"]'),
                    service = t.attr('x-service');

                input.val(service);

                $('.filter li').not(this).removeClass('active');
                $(this).addClass('active');

                form.submit();
            });


            $(document).on('change', '[x-per]', function () {
                let per = $(this).val();

                $('[x-list-form="main"] [name="per"]').val(per);

                $('[x-list-form="main"]').submit();
            });


            $(document).on('change', '[x-search]', function () {
                let search = $(this).val();

                $('[x-list-form="main"] [name="search"]').val(search);

                $('[x-list-form="main"]').submit();
            });


            $(document).on('change', '[x-list-form] select', function () {
                if ($(this).attr('x-no-submit') === undefined) $(this).closest('[x-list-form]').submit();
            });


            $(document).on('change', '[x-list-form] input', function () {
                if ($(this).attr('x-activate-url') === undefined && $(this).attr('x-no-submit') === undefined) $(this).closest('[x-list-form]').submit();
            });


            $(document).on('click', '[x-edit-url]', function (e) {
                e.preventDefault();
                e.stopPropagation();

                loading(1);

                let t = $(this), tr = t.closest('[x-tr-id]'),
                    id = tr.attr('x-tr-id'), xId = t.attr('x-modal-id'),
                    url = t.attr('x-edit-url'),
                    _modal = t.attr('x-modal') !== undefined ? t.attr('x-modal') : 'edit-modal',
                    list = t.closest('[x-list-form]').attr('x-list-form');

                id = xId !== undefined ? xId : id;

                $.post(url, {
                    'id': id,
                    '_token': csrf
                }).done(function (res) {
                    if (res['status'] === 'success') {
                        res['data']['x_list_form'] = list;

                        let info = _.template($('script[x-' + _modal + ']').html())(res['data']),
                            modal = createModal('Edit', '<div class="modal-body">' + info + '</div>', false);

                        init();

                        setTimeout(function () {
                            if (res.data.service) modal.find('[name="service"]').val(res.data.service).trigger('change');
                            if (res.data.service_id) modal.find('[name="service"]').val(res.data.service_id).trigger('change');
                            if (res.data.parent_id) modal.find('[name="parent"]').val(res.data.parent_id).trigger('change');
                            if (res.data.type_id) modal.find('[name="type"]').val(res.data.type_id).trigger('change');

                            $('[x-checkbox-list]').each(function () {
                                var t = $(this), name = t.attr('x-checkbox-list'),
                                    max = t.attr('x-checkbox-max');

                                if (res.data[name] != undefined && res.data[name].length) {
                                    if ($.type(res.data[name]) == 'string') {
                                        let variants = res.data[name].split(',');

                                        if (name === 'roles' && variants == 'admin') {
                                            $('[x-checkbox-list="' + name + '"] [x-checkbox-id]').prop('checked', true);
                                        } else if (variants.length) {
                                            $.each(variants, function (k, variant) {
                                                $('[x-checkbox-list="' + name + '"] [x-checkbox-id="' + variant + '"]').prop('checked', true);
                                            });
                                        }

                                        if (max !== undefined && variants.length >= max) {
                                            $('[x-checkbox-list="' + name + '"] [x-checkbox-id]:not(:checked)').prop('disabled', true);
                                            $('[x-checkbox-list="' + name + '"] [x-checkbox-id]:not(:checked)').closest('label').addClass('disabled');
                                        }
                                    }
                                }
                            });

                            new mPortlet('m_portlet_tools_role');

                            setTimeout(function () {
                                if ($.isFunction(window.campaignActivities)) campaignActivities(res.data);

                                checkboxList();
                            }, 55);
                        }, 5);
                    } else {
                        error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                    }
                }).fail(function () {
                    error('Network error!');
                });
            });


            $(document).on('click', '[x-add]', function (e) {
                e.preventDefault();
                e.stopPropagation();

                loading(1);

                let t = $(this), _modal = t.attr('x-modal') !== undefined ? t.attr('x-modal') : 'edit-modal',
                    list = t.closest('[x-list-form]').attr('x-list-form'),
                    column = t.attr('x-data-column') !== undefined ? t.attr('x-data-column') : false,
                    value = t.attr('x-data-value') !== undefined ? t.attr('x-data-value') : null,
                    data = { x_list_form: list };

                if (column) data[[column]] = value;

                let info = _.template($('script[x-' + _modal + ']').html())(data),
                    modal = createModal('Add', '<div class="modal-body">' + info + '</div>', false);

                init();

                setTimeout(function () {
                    new mPortlet('m_portlet_tools_role');

                    if ($.isFunction(window.addDependency)) addDependency();
                }, 5);
            });


            $(document).on('submit', '[x-edit-form]', function (e) {
                e.preventDefault();

                let submitButton = $(this).find('[type="submit"]');
                // submitButton.attr( 'disabled' , 'disabled' );

                loading(1);

                let t = $(this), formData = new FormData(this), url = t.attr('action'),
                    list = t.attr('x-list') !== undefined ? t.attr('x-list') : 'main',
                    target = t.attr('x-target'),
                    targetWithData = t.attr('x-target-with-data');

                t.find('[name]').each(function () {
                    let _t = $(this), name = _t.attr('name');

                    if (name != 'rate') {
                        _t.css('border-color', '#ebedf2');

                        _t.prev('label').css('color', '#575962');
                    }

                    t.find('[for="' + name + '"]').css('color', '#575962');
                });

                t.find('[x-tab-title]').css('color', '#575962');

                formData.append('_token', csrf);

                $.ajax({
                    type: 'POST',
                    url: url,
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (res) {

                        if (res['status'] === 'success') {
                            if (res.validations !== undefined && Object.keys(res.validations).length) {


                                $.each(res.validations, function (name, v) {
                                    let tab = t.find('[name="' + name + '"]').closest('[x-tab]').attr('id');

                                    if (name != 'rate') {
                                        t.find('[name="' + name + '"]').prev('label').css('color', 'red');

                                        t.find('[name="' + name + '"]').css('border-color', 'red');
                                    }

                                    t.find('[for="' + name + '"]').css('color', 'red');

                                    t.find('[x-tab-title][href="#' + tab + '"]').css('color', 'red');
                                });

                                submitButton.removeAttr('disabled');
                            } else {
                                $('.modal-sure').hide();
                                $('.modal').modal('hide');
                                let title = res.title !== undefined ? res.title : 'Success!',
                                    text = res.text !== undefined ? res.text : '';

                                if (targetWithData && typeof window[targetWithData] === 'function') {
                                    window[targetWithData](res);
                                } else if (target && typeof window[target] === 'function') {
                                    window[target]();
                                } else if ($.isFunction(window.editFormCallback)) editFormCallback(res);

                                else {
                                    const swalWithBootstrapButtons = swal.mixin({
                                        confirmButtonClass: 'btn btn-primary',
                                        buttonsStyling: false
                                    });

                                    swalWithBootstrapButtons({
                                        type: 'success',
                                        title: title,
                                        text: text,
                                        showConfirmButton: true
                                    });

                                    if (t.attr('x-redirect-url') !== undefined) {
                                        location.href = t.attr('x-redirect-url');
                                    } else if (t.closest('.modal').length) {
                                        $('[x-list-form="' + list + '"]').submit();

                                        t.closest('.modal').modal('hide');
                                    } else {
                                        //
                                    }
                                }
                            }

                            loading();
                        } else {
                            error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                        }
                    },
                    error: function (res) {
                        error('Network error!');
                    }
                });
            });


            $(document).on('click', '[x-modal-view]', function (e) {
                e.preventDefault();
                e.stopPropagation();

                loading(1);

                let t = $(this), tr = t.closest('[x-tr-id]'),
                    modal_ = t.attr('x-modal') !== undefined ? t.attr('x-modal') : 'x-view-modal',
                    title = t.attr('x-modal-title') !== undefined ? t.attr('x-modal-title') : 'Info',
                    data = {
                        id: t.attr('x-modal-id') !== undefined ? t.attr('x-modal-id') : tr.attr('x-tr-id'),
                        column: t.attr('x-data-column') !== undefined ? t.attr('x-data-column') : '___',
                        value: t.attr('x-data-value') !== undefined ? t.attr('x-data-value') : null
                    },
                    info = _.template($('script[' + modal_ + ']').html())(data),
                    modal = createModal(title, '<div class="modal-body">' + info + '</div>');

                setTimeout(function () {
                    init();
                }, 55);

                loading();
            });


            $(document).on('click', '[x-view-url]', function (e) {
                e.preventDefault();
                e.stopPropagation();

                loading(1);

                let t = $(this), tr = t.closest('[x-tr-id]'), id = tr.attr('x-tr-id'),
                    url = t.attr('x-view-url'),
                    column = t.attr('x-modal-column'), xId = t.attr('x-modal-id'),
                    modal_ = t.attr('x-modal');

                column = column !== undefined ? column : 'id';

                id = xId !== undefined ? xId : id;

                modal_ = modal_ !== undefined ? modal_ : 'x-view-modal';

                $.post(url, {
                    [column]: id,
                    '_token': csrf
                }).done(function (res) {
                    if (res['status'] === 'success') {
                        var info = _.template($('script[' + modal_ + ']').html())(res['data']),
                            modal = createModal('Info', '<div class="modal-body">' + info + '</div>');

                        loading();
                    } else {
                        error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                    }
                }).fail(function () {
                    error('Network error!');
                });
            });


            $(document).on('click', '[x-modal-url]', function (e) {
                e.preventDefault();
                e.stopPropagation();

                loading(1);

                let t = $(this), tr = t.closest('[x-tr-id]'),
                    id = t.attr('x-modal-id') !== undefined ? t.attr('x-modal-id') : tr.attr('x-tr-id'),
                    url = t.attr('x-modal-url'), column = t.attr('x-modal-column');

                column = column !== undefined ? column : 'id';

                $.post(url, {
                    [column]: id,
                    '_token': csrf
                }).done(function (res) {
                    if (res['status'] === 'success') {
                        modal = createModal('Info', '<div class="modal-body">' + res['data'] + '</div>');

                        setTimeout(function () {
                            modal.find('[x-list-form]').submit();
                        }, 5);

                        init();
                    } else {
                        error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                    }
                }).fail(function () {
                    error('Network error!');
                });
            });


            $(document).on('change', '[x-activate-url]', function (e) {
                e.stopPropagation();

                loading(1);

                let t = $(this), url = t.attr('x-activate-url'), xId = t.attr('x-modal-id'),
                    id = t.closest('[x-tr-id]').attr('x-tr-id'),
                    active = Number(t.prop('checked')), column = t.attr('x-modal-column');

                id = xId !== undefined ? xId : id;

                column = column !== undefined ? column : 'active';

                $.post(url, {
                    'id': id,
                    '_token': csrf,
                    [column]: active
                }).done(function (res) {
                    if (res['status'] === 'success') {
                        loading();
                    } else {
                        error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                    }
                }).fail(function () {
                    error('Network error!');
                });
            });

            $(document).on('change', '[x-activate-url-refresh]', function (e) {
                e.stopPropagation();

                loading(1);

                let t = $(this), url = t.attr('x-activate-url-refresh'), xId = t.attr('x-modal-id'),
                    id = t.closest('[x-tr-id]').attr('x-tr-id'),
                    active = Number(t.prop('checked')), column = t.attr('x-modal-column');

                id = xId !== undefined ? xId : id;

                column = column !== undefined ? column : 'active';

                $.post(url, {
                    'id': id,
                    '_token': csrf,
                    [column]: active
                }).done(function (res) {
                    if (res['status'] === 'success') {
                        loading();
                        $('[x-list-form]').trigger('submit');
                    } else {
                        error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                    }
                }).fail(function () {
                    error('Network error!');
                });
            });


            $(document).on('change', '[x-change-url]', function (e) {
                e.stopPropagation();

                loading(1);

                let t = $(this), url = t.attr('x-change-url'), id = t.closest('[x-tr-id]').attr('x-tr-id'),
                    value = t.val(), column = t.attr('x-modal-column');

                column = column !== undefined ? column : 'status';

                $.post(url, {
                    'id': id,
                    '_token': csrf,
                    [column]: value
                }).done(function (res) {
                    if (res['status'] === 'success') {
                        loading();
                    } else {
                        error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                    }
                }).fail(function () {
                    error('Network error!');
                });
            });


            $(document).on('click', '[x-checkbox-id]', function () {
                let t = $(this), name = t.attr('x-checkbox-id'),
                    p = t.closest('[x-checkbox-list]'), p_name = p.attr('x-checkbox-list'),
                    max = p.attr('x-checkbox-max'),
                    group = t.closest('[x-checkbox-group="' + name + '"]'),
                    state = t.prop('checked')
                    ;

                if (p_name === 'roles') {
                    if (name === 'admin') p.find('[x-checkbox-id]').prop('checked', state);

                    else if (!state) p.find('[x-checkbox-id="admin"]').prop('checked', false);

                    else if (p.find('[x-checkbox-id]:checked').length + 1 === p.find('[x-checkbox-id]').length) p.find('[x-checkbox-id="admin"]').prop('checked', true);
                }

                if (max !== undefined) {
                    if (p.find('[x-checkbox-id]:checked').length >= max) {
                        p.find('[x-checkbox-id]:not(:checked)').prop('disabled', 'disabled');

                        p.find('[x-checkbox-id]:not(:checked)').closest('label').addClass('disabled');
                    } else {
                        p.find('[x-checkbox-id]').prop('disabled', '');

                        p.find('[x-checkbox-id]:not(:checked)').closest('label').removeClass('disabled');
                    }
                }

                if (group !== undefined && group.length && group.find('[x-checkbox-id]').length) group.find('[x-checkbox-id]').prop('checked', state);

                t.parents('[x-checkbox-group]').each(function () {
                    let _t = $(this), _name = _t.attr('x-checkbox-group');

                    if (!state || (_t.find('[x-checkbox-id]:checked').length + 1 === _t.find('[x-checkbox-id]').length && _name !== 'admin')) $('[x-checkbox-id="' + _name + '"]').prop('checked', state);
                });

                setTimeout(function () {
                    checkboxList();
                }, 5);
            });


            $(document).on('click', '[x-delete-url]', function (e) {
                let t = $(this), tr = t.closest('[x-tr-id]'), url = t.attr('x-delete-url'),
                    _with = t.attr('x-with'), _with_id = t.attr('x-with-id'),
                    id = tr.attr('x-tr-id');


                const swalWithBootstrapButtons = swal.mixin({
                    confirmButtonClass: 'btn btn-dark',
                    cancelButtonClass: 'btn btn-primary',
                    buttonsStyling: false,
                });

                swalWithBootstrapButtons({
                    title: "Silmək istədiyinizə əminsinizmi?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: "Bəli",
                    cancelButtonText: "Ləğv et",
                    reverseButtons: true
                }).then((r) => {
                    if (r.value) {
                        loading(1);

                        $.post(url, {
                            'id': id,
                            [_with]: _with_id,
                            '_token': csrf
                        }).done(function (res) {
                            if (res['status'] === 'success') {
                                tr.fadeOut(function () {
                                    $(this).remove();
                                });

                                if ($.isFunction(window.__u)) __u();

                                loading();
                            } else {
                                error(res.exception !== undefined ? (res.exception.message + ' | Line: ' + res.exception.line + ' | File: ' + res.exception.file) : (res.warning !== undefined ? res.warning : ''));
                            }
                        }).fail(function () {
                            error('Network error!');
                        });
                    }
                });
            });


            $(document).on('keydown', '[x-no-enter]', function (e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            });


            $('body').on('change', '[x-photo-input]', function (e) {
                let ext = e.target.files[0]['name'].replace(/^.*\./, '').toLowerCase(),
                    t = $(this), name = t.attr('x-photo-input'),
                    img = t.closest('[x-photo]').find('[x-photo-img="' + name + '"]');

                if (ext == 'jpeg' || ext == 'png' || ext == 'jpg') {
                    img.attr('src', URL.createObjectURL(e.target.files[0]));
                } else {
                    t.val('');

                    img.attr('src', img.attr('x-photo-default'));

                    error('', 'Select valid image extension');
                }
            });


            $(document).on('click', '[x-image-id] [x-image-delete]', function (e) {
                e.stopPropagation();
                e.preventDefault();

                let div = $(this).closest('[x-image-id]'), id = div.attr('x-image-id');

                deleted_files.push(id);

                $('[name="deleted_files"]').val(JSON.stringify(deleted_files));

                div.fadeOut(function () {
                    $(this).remove();
                });
            });


            $(document).on('click', '[x-customer]', function (e) {
                e.preventDefault();
                e.stopPropagation();

                let type = $(this).attr('x-customer');

                $('[x-customer]').removeClass('active');
                // $( '[x-customer="individual"]' ).addClass( 'active' );
                $('[x-customer="' + type + '"]').addClass('active');

                $('[x-customer-show]').addClass('hidden');
                $('[x-customer-show][x-' + type + ']').removeClass('hidden');
            });


            $(document).keyup(function (e) {
                if (e.keyCode == 27) $('.close-modal:last').click();
            });


            init();

            $('[x-list-form="main"]').submit();
        })
            ;
    </script>

    <script src="~/js/jquery.inputmask64dd.js?v=1659074144"></script>
    <script src="~/js/inputmask2d0c.js?v=1659074108"></script>
    <script src="~/js/inputmask.bindingfa6c.js?v=1659074079"></script>

    <script>
        function afterRegister(response) {
            $('.registration-right header , .registration-right .register-body').hide();
            $('.regInfo').fadeIn();
        }

        $(".phoneMask").inputmask({
            mask: "+\\9\\94 (99) 999 99 99",
            clearMaskOnLostFocus: false,
        }).keyup(function () {
            var val = $(this).val().split("(");
            var val2 = val.join("").split(")");
            var val3 = val2.join("").split(" ");
            var val4 = val3.join("");
            var val5 = val4.split("_");
            var val6 = val5.filter(function (index) {
                return index !== "";
            });
            $(this).val(val6[0]);
            $(this).parents('.phoneMaskParent').find('input[hidden]').val(val6[0]);
        });

        $(document).on("click", ".customer .rectangle", function () {
            console.log("c", $(this).find("input[type='checkbox']").prop('checked'));

            if ($(this).find("input[type='checkbox']").prop('checked')) {
                $('.customer button[type="submit"]').removeClass('disableButton');
            } else {
                $('.customer button[type="submit"]').addClass('disableButton');
            }
        })

        $(document).on("click", ".partner-business .rectangle", function () {
            console.log('b', $(this).find("input[type='checkbox']").prop('checked'));
            if ($(this).find("input[type='checkbox']").prop('checked')) {
                $('.partner-business button[type="submit"]').removeClass('disableButton');
            } else {
                $('.partner-business button[type="submit"]').addClass('disableButton');
            }
        })

    </script>




</body>

<!-- Mirrored from 166.az/az/register by HTTrack Website Copier/3.x [XR&CO'2014], Fri, 25 Nov 2022 19:40:36 GMT -->
</html>

